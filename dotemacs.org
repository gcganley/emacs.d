* Emacs
#+BEGIN_SRC emacs-lisp
(when window-system
  (blink-cursor-mode 0) ; Disable the cursor blinking
  (scroll-bar-mode 0)   ; Disable the scroll bar
  (tool-bar-mode 0)     ; Disable the tool bar
  (tooltip-mode 0))     ; Disable the tooltips
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq-default
 cursor-in-non-selected-windows t     ; Hide the cursor in inactive windows
 inhibit-startup-screen t             ; Disable start-up screen
 initial-scratch-message ""           ; Empty the initial *scratch* buffer
 load-prefer-newer t                  ; Prefers the newest version of a file
 select-enable-clipboard t            ; Merge system's and Emacs' clipboard
 use-package-always-ensure t          ; Avoid the :ensure keyword for each package
 user-full-name "Gregory Ganley"      ; Set the full name of the current user
 user-mail-address "greg@ganley.dev") ; Set the email address of the current user

(cd "~/")                           ; Move to the user directory
(delete-selection-mode 1)           ; Replace region when inserting text
(fringe-mode 0)                     ; Disable fringes
(fset 'yes-or-no-p 'y-or-n-p)       ; Replace yes/no prompts with y/n
(set-default-coding-systems 'utf-8) ; Default to utf-8 encoding
(add-to-list 'default-frame-alist '(font . "Fira Code-12"))
(dotimes (n 10)
  (global-unset-key (kbd (format "C-%d" n)))
  (global-unset-key (kbd (format "M-%d" n))))
(when (eq system-type 'darwin)
  (menu-bar-mode 1)
  (setq mac-command-modifier 'meta
        mac-option-modifier 'super))
#+END_SRC

* Package Management
** Use Package
- After loading, you can use M-x describe-personal-keybindings to see all such keybindings you've set throughout your .emacs file.
- remember to restrict :init code to only what would succeed either way.
- When you use the :commands keyword, it creates autoloads for those commands and defers loading of the module until they are used
- key binding syntax follows kbd style [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-Rebinding.html]]
- Furthermore, remapping commands with :bind and bind-key works as expected, because when the binding is a vector, it is passed straight to define-key

#+BEGIN_SRC emacs-lisp
;; Package `use-package' provides a handy macro by the same name which
;; is essentially a wrapper around `with-eval-after-load' with a lot
;; of handy syntactic sugar and useful features.
(straight-use-package 'use-package)

;; When configuring a feature with `use-package', also tell
;; straight.el to install a package of the same name, unless otherwise
;; specified using the `:straight' keyword.
(setq straight-use-package-by-default t)

(setq use-package-always-defer nil)
#+END_SRC

** No Littering
#+BEGIN_SRC emacs-lisp
(use-package recentf :straight t :demand t)
(use-package no-littering
   :straight t
   :demand t
   :config
   (setq auto-save-file-name-transforms
         `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))
         no-littering-etc-directory (expand-file-name "config/" user-emacs-directory)
         no-littering-var-directory (expand-file-name "data/" user-emacs-directory)
         custom-file (expand-file-name "custom.el" user-emacs-directory))
   (add-to-list 'recentf-exclude no-littering-var-directory)
   (add-to-list 'recentf-exclude no-littering-etc-directory))
#+END_SRC
** 
* Theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :straight t
  :demand t
  :custom
  (doom-themes-enable-bold nil)
  :config
  (load-theme 'doom-nord t))

;; (use-package doom-modeline
;;   :defer 0.1
;;   :config (doom-modeline-mode))

;; (use-package all-the-icons
;;   :if (display-graphic-p)
;;   :config (unless (find-font (font-spec :name "all-the-icons"))
;; 	    (all-the-icons-install-fonts t)))

#+END_SRC

* Languages
** Org
#+BEGIN_SRC emacs-lisp
(straight-use-package '(org :local-repo nil))

(defun gg/goto-and-focus (&optional arg)
  (interactive "P")
  (org-clock-goto)
  (org-tree-to-indirect-buffer))

(use-package org
  :straight t
  :demand t
  :bind (("C-c c" . org-capture)
         ("<f11>" . gg/goto-and-focus))
  :custom
  (org-descriptive-links nil)
  (org-edit-src-content-indentation 0)
  (org-edit-src-persistent-message nil)
  (org-fontify-done-headline t)
  (org-fontify-quote-and-verse-blocks t)
  (org-src-window-setup 'current-window)
  (org-startup-folded nil)
  (org-startup-truncated nil)
  (org-support-shift-select 'always)
  :config
  (setq 
   org-clock-persist t
   org-default-notes-file (concat org-directory "/todo.org")
   org-hide-leading-stars t
   org-clock-in-resume t
   org-clock-mode-line-total 'today
   org-clock-out-remove-zero-time-clocks t
   org-clock-out-when-done t
   org-clock-history-length 23
   org-clock-report-include-clocking-task t
   org-clock-auto-clock-resolution (quote when-no-clock-is-running)
   org-clock-persist-query-resume nil
   org-clock-idle-time 15
   org-goto-interface 'outline-path-completion
   org-outline-path-complete-in-steps nil)
  (org-clock-persistence-insinuate)
  (add-hook 'org-mode-hook #'visual-line-mode))
#+END_SRC
* Editor
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :straight t)
#+END_SRC
** Helpful
#+BEGIN_SRC emacs-lisp
(use-package helpful
  :straight t
  :demand t
  :bind (("C-h f" . helpful-callable)
         ("C-h v" . helpful-variable)
         ("C-h k" . helpful-key)))
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  (setq
   dashboard-startup-banner nil))
#+END_SRC
