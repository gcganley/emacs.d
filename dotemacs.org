* Emacs
#+BEGIN_SRC emacs-lisp
(when window-system
  (blink-cursor-mode 0) ; Disable the cursor blinking
  (scroll-bar-mode 0)   ; Disable the scroll bar
  (tool-bar-mode 0)     ; Disable the tool bar
  (tooltip-mode 0))     ; Disable the tooltips
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 fill-column 120                                  ; Set width for automatic line breaks
 help-window-select t                             ; Focus new help windows when opened
 indent-tabs-mode nil                             ; Stop using tabs to indent
 inhibit-startup-screen t                         ; Disable start-up screen
 mouse-yank-at-point t                            ; Yank at point rather than pointer
 ns-use-srgb-colorspace nil                       ; Don't use sRGB colors
 recenter-positions '(5 top bottom)               ; Set re-centering positions
 scroll-conservatively most-positive-fixnum       ; Always scroll by one line
 scroll-margin 10                                 ; Add a margin when scrolling vertically
 select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
 sentence-end-double-space nil                    ; End a sentence after a dot and a space
 show-help-function nil                           ; Disable help messages
 show-trailing-whitespace nil                     ; Display trailing whitespaces
 split-height-threshold nil                       ; Disable vertical window splitting
 split-width-threshold nil                        ; Disable horizontal window splitting
 tab-width 4                                      ; Set width for tabs
 uniquify-buffer-name-style 'forward              ; Uniquify buffer names
 window-combination-resize t                      ; Resize windows proportionally
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width
(cd "~/")                                         ; Move to the user directory
(delete-selection-mode 1)                         ; Replace region when inserting text
(fringe-mode 0)                                   ; Disable fringes
(fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
(global-subword-mode 1)                           ; Iterate through CamelCase words
(menu-bar-mode 0)                                 ; Disable the menu bar
(mouse-avoidance-mode 'banish)                    ; Avoid collision of mouse with point
(put 'downcase-region 'disabled nil)              ; Enable downcase-region
(put 'upcase-region 'disabled nil)                ; Enable upcase-region
(set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
(add-to-list 'default-frame-alist '(font . "Fira Code-8"))
(dotimes (n 10)
  (global-unset-key (kbd (format "C-%d" n)))
  (global-unset-key (kbd (format "M-%d" n))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'focus-out-hook #'garbage-collect)
#+END_SRC

* Use Package
- After loading, you can use M-x describe-personal-keybindings to see all such keybindings you've set throughout your .emacs file.
- remember to restrict :init code to only what would succeed either way.
- When you use the :commands keyword, it creates autoloads for those commands and defers loading of the module until they are used
- key binding syntax follows kbd style [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-Rebinding.html]]
- Furthermore, remapping commands with :bind and bind-key works as expected, because when the binding is a vector, it is passed straight to define-key
- 


#+BEGIN_SRC emacs-lisp
;; Package `use-package' provides a handy macro by the same name which
;; is essentially a wrapper around `with-eval-after-load' with a lot
;; of handy syntactic sugar and useful features.
(straight-use-package 'use-package)

;; When configuring a feature with `use-package', also tell
;; straight.el to install a package of the same name, unless otherwise
;; specified using the `:straight' keyword.
(setq straight-use-package-by-default t)

;; Tell `use-package' to always load features lazily unless told
;; otherwise. It's nicer to have this kind of thing be deterministic:
;; if `:demand' is present, the loading is eager; otherwise, the
;; loading is lazy. See
;; https://github.com/jwiegley/use-package#notes-about-lazy-loading.
(setq use-package-always-defer t)
#+END_SRC

** No Littering

#+BEGIN_SRC emacs-lisp
(use-package no-littering
  :straight t
  :ensure t
  :requires recentf
  :config
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))
        no-littering-etc-directory (expand-file-name "config/" user-emacs-directory)
        no-littering-var-directory (expand-file-name "data/" user-emacs-directory)
        custom-file (expand-file-name "custom.el" user-emacs-directory))
  (add-to-list 'recentf-exclude no-littering-var-directory)
  (add-to-list 'recentf-exclude no-littering-etc-directory))
#+END_SRC
* Theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :straight t
  :demand t
  :custom
  (doom-themes-enable-bold nil)
  :config
  (load-theme 'doom-one t))
#+END_SRC

* Languages
** Rust
#+BEGIN_SRC emacs-lisp
(use-package rustic
  :straight t)
#+END_SRC
** Go
#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :straight t)
#+END_SRC
** Typescript
#+BEGIN_SRC emacs-lisp
(use-package tide
  :straight t
  :after (typescript-mode company flycheck)
  :hook ((typescript-mode . tide-setup)
         (typescript-mode . tide-hl-identifier-mode)
         (before-save . tide-format-before-save))
  :config
  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    ;; company is an optional dependency. You have to
    ;; install it separately via package-install
    ;; `M-x package-install [ret] company`
    (company-mode +1))

  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)

  ;; formats the buffer before saving
  (add-hook 'before-save-hook 'tide-format-before-save)

  (add-hook 'typescript-mode-hook #'setup-tide-mode))
#+END_SRC
** JSON
#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :straight t)
#+END_SRC
** Org
#+BEGIN_SRC emacs-lisp
(use-package org
  :straight t
  :bind (("C-c c" . org-capture))
  :custom
  (org-descriptive-links nil)
  (org-edit-src-content-indentation 0)
  (org-edit-src-persistent-message nil)
  (org-fontify-done-headline t)
  (org-fontify-quote-and-verse-blocks t)
  (org-src-window-setup 'current-window)
  (org-startup-folded nil)
  (org-startup-truncated nil)
  (org-support-shift-select 'always)
  :config
  (setq 
   org-clock-persist 'history
   org-default-notes-file (concat org-directory "/notes.org")
   org-hide-leading-stars t)
  (org-clock-persistence-insinuate))
#+END_SRC
* Editor
** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :straight t
    :hook
    (after-init . ivy-mode)
    :bind
    (:map ivy-minibuffer-map
	  ("C-<down>" . ivy-next-line-and-call)
	  ("C-<up>" . ivy-previous-line-and-call))
    :custom
    (ivy-count-format "")
    (ivy-display-style nil)
    (ivy-fixed-height-minibuffer t)
    (ivy-height 20)
    (ivy-initial-inputs-alist nil)
    (ivy-re-builders-alist '((t . ivy--regex-plus)))
    (ivy-format-functions-alist '((t . ivy-format-function-line))))
#+END_SRC
** Counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :straight t
  :after ivy
  :config
  (counsel-mode 1)
  (setq-default ivy-initial-inputs-alist nil))
(use-package counsel-projectile
  :after ivy
  :config
  (counsel-projectile-mode 1)
  (setq-default ivy-initial-inputs-alist nil))
#+END_SRC

** Swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :straight t
  :preface
  (defun me/swiper ()
    "`swiper' with string returned by `ivy-thing-at-point' as initial input."
    (interactive)
    (swiper (ivy-thing-at-point)))
  :bind ("C-s" . me/swiper)
  :custom (swiper-goto-start-of-match t))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :straight t
  :bind
  (:map magit-hunk-section-map
        ("RET" . magit-diff-visit-file-other-window)
        ([return] . magit-diff-visit-file-other-window))
  :custom
  (magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
  (magit-diff-highlight-hunk-body nil)
  (magit-diff-highlight-hunk-region-functions
   '(magit-diff-highlight-hunk-region-dim-outside magit-diff-highlight-hunk-region-using-face))
  (magit-popup-display-buffer-action '((display-buffer-same-window)))
  (magit-refs-show-commit-count 'all)
  (magit-section-show-child-count t)
  :config
  (remove-hook 'magit-section-highlight-hook #'magit-section-highlight))
#+END_SRC
** Agressive Indent
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :straight t
  :preface
  (defun me/aggressive-indent-mode-off ()
    (aggressive-indent-mode 0))
  :hook
  ((css-mode . aggressive-indent-mode)
   (emacs-lisp-mode . aggressive-indent-mode)
   (js-mode . aggressive-indent-mode)
   (lisp-mode . aggressive-indent-mode)
   (sgml-mode . aggressive-indent-mode))
  :custom
  (aggressive-indent-comments-too t)
  :config
  (add-to-list 'aggressive-indent-protected-commands 'comment-dwim))
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :straight t
  :hook
  (after-init . projectile-global-mode)
  :init
  (setq-default
   projectile-cache-file (expand-file-name ".projectile-cache" user-emacs-directory)
   projectile-known-projects-file (expand-file-name ".projectile-bookmarks" user-emacs-directory))
  :custom
  (projectile-enable-caching t))
#+END_SRC
** Smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :straight t
  :bind
  (("M-<backspace>" . sp-unwrap-sexp)
   ("M-<left>" . sp-forward-barf-sexp)
   ("M-<right>" . sp-forward-slurp-sexp)
   ("M-S-<left>" . sp-backward-slurp-sexp)
   ("M-S-<right>" . sp-backward-barf-sexp))
  :hook
  (after-init . smartparens-global-mode)
  :custom
  (sp-highlight-pair-overlay nil)
  (sp-highlight-wrap-overlay nil)
  (sp-highlight-wrap-tag-overlay nil)
  :config
  (show-paren-mode 0)
  (require 'smartparens-config))
#+END_SRC

** Eyebrowse
#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
  :straight t
  :bind (("M-1" . eyebrowse-switch-to-window-config-1)
         ("M-2" . eyebrowse-switch-to-window-config-2)
         ("M-3" . eyebrowse-switch-to-window-config-3)
         ("M-4" . eyebrowse-switch-to-window-config-4))
  :config
  (eyebrowse-mode t)
  (setq eyebrowse-new-workspace t))
#+END_SRC
** Ace Window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :straight t
  :bind* ("M-o" . ace-window))
#+END_SRC
